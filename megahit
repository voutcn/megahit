#!/usr/bin/env python

#-------------------------------------------------------------------------
# MEGAHIT
# Copyright (C) 2014 The University of Hong Kong
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------

from __future__ import print_function

import sys
import getopt
import subprocess
import errno
import os, glob
import tempfile
import warnings
import shutil
import math  
import locale
import multiprocessing

from datetime import datetime, date, time

megahit_version_str = "MEGAHIT v0.2.0-a"
usage_message = '''
Copyright (c) The University of Hong Kong

Usage:
    ./megahit [options] -m <max_memory_to_use> -l <max_read_len> {-r <reads.fa> | --input_cmd <command>}

Required Arguments:
    -m/--memory                    <float>      max memory in byte to be used.
                                                This argument is used to optimize the graph building module,
                                                to prevent the SdBG builder from allocating memory larger than this value.
                                                This value is recommended to be 90-95% of the machine's (free) memory.
                                                The SdBG builder is unnecessary using all memory. Please refer to --mem-flag.
    -l/--max-read-len              <int>        maximum read length
    
  one of the two below arguments must be specified:       
    -r/--read-file                 <string>     one fasta/fastq file contains all reads, can be gzip'ed
    --input-cmd                    <string>     command of input
                                                This command should output all reads in fasta/fastq format to stdout.
                                                example:
                                                --input-cmd "zcat *.fastq.gz"
                                                If the command is too complex, try to convert all input reads into one
                                                fasta file, then use the "-r" option.

Optional Arguments:
  Hardware options:
    --mem-flag                     <int>        How the SdBG build utilize memory. SdBG builder runs faster with more memory.
                                                0: minimum; 1: moderate; others: use all memory specified by '-m/--memory'.
                                                Default: 1.
    --cpu-only                                  do not use GPU. Use CPU only.
    --gpu-mem                      <float>      GPU memory in byte to be used. Default: auto detect to use up all free GPU memory. 
    -t/--num-cpu-threads           <int>        Number of CPU threads, at least 2. Default: auto detect to use all CPU threads.

  Output options:
    -o/--out-dir                   <string>     output directory, default: ./megahit_out
    --min-contig-len               <int>        minimum length of contigs to output, default: 200
    --keep-tmp-files                            keep all temporary files

  Basic assembly options:
    --k-min                        <int>        minimum kmer size (<= 123), must be odd number, default: 21
    --k-max                        <int>        maximum kmer size (<= 123), must be odd number, default: 99
    --k-step                       <int>        increment of kmer size of each iteration (<= 28), must be even number, default: 10
    --min-count                    <int>        minimum multiplicity for filtering (k+1)-mer when building the graph for k=k_min,
                                                default: 2. 
                                                Change the default value with cautions:
                                                 this value less than 2 will lead to much more larger memory usage.

  More detail assembly options:
    --no-mercy                                  do not add mercy (k+1)-mer for k=k_min, default: off
    --no-low-local                              do not progressively remove low local coverage contigs, default: off
    --low-local-ratio              <float>      ratio threshold to define low local coverage contigs. Default: 0.2
    --max-tip-len                  <int>        tips with length less than this value will be removed.
                                                Default: 2*k for iteration of kmer_size=k
    --no-bubble                                 do not remove bubbles, default: off

Other Arguments:
    --continue                                  continue a MEGAHIT run from its last available check point.
                                                please set output directory correctly if you use this option.
    -h/--help                                   print the usage message
'''

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

class Options():
    def __init__(self):
        self.host_mem = 0
        self.gpu_mem = 0
        self.max_read_len = 0
        self.read_file = ""
        self.input_cmd = ""
        self.out_dir = "./megahit_out/"
        self.min_contig_len = 200
        self.k_min = 21
        self.k_max = 99
        self.k_step = 10
        self.min_count = 2
        self.bin_dir = sys.path[0] + "/"
        self.max_tip_len = -1
        self.no_mercy = 0
        self.no_low_local = 0
        self.no_bubble = 0
        self.num_cpu_threads = 0
        self.low_local_ratio = 0.2
        self.temp_dir = self.out_dir + "tmp/"
        self.keep_tmp_files = 0
        self.builder = "sdbg_builder_gpu"
        self.cpu_only = 0
        self.mem_flag = 1
        self.continue_mode = 0;
        self.last_cp = -1;

opt = Options()
cp = 0

def log_file_name():
    return opt.out_dir + "log"

def make_out_dir():
    if os.path.exists(opt.out_dir):
        pass
    else:
        os.mkdir(opt.out_dir)

    if os.path.exists(opt.temp_dir):
        pass
    else:
        os.mkdir(opt.temp_dir)

def parse_opt(argv):
    try:
        opts, args = getopt.getopt(argv, "hm:l:o:r:t:", 
                                    ["help",  
                                     "memory=",
                                     "max-read-len=",
                                     "read-file=",
                                     "input-cmd=",
                                     "out-dir=",
                                     "min-contig-len=",
                                     "cpu-only",
                                     "num-cpu-threads=",
                                     "gpu-mem=",
                                     "k-min=",
                                     "k-max=",
                                     "k-step=",
                                     "num-cpu-threads=",
                                     "min-count=",
                                     "no-mercy",
                                     "no-low-local",
                                     "max-tip-len=",
                                     "no-bubble",
                                     "low-local-ratio=",
                                     "keep-tmp-files",
                                     "mem-flag=",
                                     "continue"])
    except getopt.error as msg:
        raise Usage(megahit_version_str + '\n' + str(msg))
    if len(opts) == 0:
        raise Usage(megahit_version_str + '\n' + usage_message)

    global opt
    need_continue = False

    for option, value in opts:
        if option in ("-h", "--help"):
            raise Usage(megahit_version_str + '\n' + usage_message)
        elif option in ("-o", "--out-dir"):
            opt.out_dir = value + "/"
            opt.temp_dir = opt.out_dir + "tmp/"
        elif option in ("-r", "--readfile"):
            opt.read_file = value
        elif option == "--input-cmd":
            opt.input_cmd = value
        elif option in ("-m", "--memory"):
            opt.host_mem = int(float(value))
        elif option == "--gpu-mem":
            opt.host_mem = int(float(value))
        elif option in ("-l", "--max-read-len"):
            opt.max_read_len = int(value)
        elif option == "--min-contig-len":
            opt.min_contig_len = int(value)
        elif option in ("-t", "--num-cpu-threads"):
            opt.num_cpu_threads = int(value)
        elif option == "--k-min":
            opt.k_min = int(value)
        elif option == "--k-max":
            opt.k_max = int(value)
        elif option == "--k-step":
            opt.k_step = int(value)
        elif option == "--min-count":
            opt.min_count = int(value)
        elif option == "--max-tip-len":
            opt.max_tip_len = int(value)
        elif option == "--no-bubble":
            opt.no_bubble = 1
        elif option == "--no-mercy":
            opt.no_mercy = 1
        elif option == "--no-low-local":
            opt.no_low_local = 1
        elif option == "--keep-tmp-files":
            opt.keep_tmp_files = 1
        elif option == "--cpu-only":
            opt.cpu_only = 1
            opt.builder = "sdbg_builder_cpu"
        elif option == "--mem-flag":
            opt.mem_flag = int(value)
        elif option == "--continue":
            if opt.continue_mode == 0: # avoid check again again again...
                need_continue = True
        else:
            print("Invalid option %s", option, file=sys.stderr)
            exit(1)

    if need_continue:
        prepare_continue()

def check_opt():
    global opt
    if opt.host_mem <= 0:
        print("Memory must be greater than 0.", file=sys.stderr)
        exit(1)
    if opt.cpu_only == 1:
        opt.gpu_mem = 0
    if opt.max_read_len <= 1:
        print("max_read_len must be greater than 1.", file=sys.stderr)
        exit(1)
    if opt.read_file == "" and opt.input_cmd == "":
        print("No read_file or input_cmd.", file=sys.stderr)
        exit(1)
    if opt.read_file != "" and opt.input_cmd != "":
        print("Both read_file and input_cmd are set. Please use only one of them.", file=sys.stderr)
        exit(1)
    if opt.k_max >= opt.max_read_len:
        opt.k_max = int(opt.max_read_len) / 2 * 2 - 1 
        print("Constrain maximum read length, k_max is set to be " + str(opt.k_max), file=sys.stderr)
    if opt.k_min < 9:
        print("k_min should be at least 9.", file=sys.stderr)
        exit(1)
    if opt.k_max > 123:
        print("k_max cannot exceed 123.", file=sys.stderr)
        exit(1)
    if opt.k_max < opt.k_min:
        print("k_min should be no larger than k_max.", file=sys.stderr)
        exit(1)
    if opt.k_min % 2 == 0 or opt.k_max % 2 == 0:
        print("k_min and k_max must be odd numbers.", file=sys.stderr)
        exit(1)
    if opt.k_step > 28:
        print("step must be less than 29.", file=sys.stderr)
        exit(1)
    if opt.k_step % 2 != 0:
        print("step must be an even number.", file=sys.stderr)
        exit(1)
    if opt.min_count <= 0:
        print("min_count must be greater than 0.", file=sys.stderr)
        exit(1)
    if opt.low_local_ratio <= 0 or opt.low_local_ratio > 0.5:
        print("low_local_ratio should be in (0, 0.5].", file=sys.stderr)
        exit(1)
    if opt.num_cpu_threads > multiprocessing.cpu_count():
        print("Maximum number of available CPU thread is %d." % multiprocessing.cpu_count(), file=sys.stderr);
        print("Number of thread is reset to the %d." % multiprocessing.cpu_count(), file=sys.stderr);
        opt.num_cpu_threads = multiprocessing.cpu_count()
    if opt.num_cpu_threads == 0:
        opt.num_cpu_threads = multiprocessing.cpu_count()
    if opt.num_cpu_threads <= 1:
        print("num_cpu_threads should be at least 2.", file=sys.stderr)
        exit(1)

def write_opt(argv):
    with open(opt.out_dir + "opts.txt", "w") as f:
        print("\n".join(argv), file=f)

def prepare_continue():
    global opt # out_dir is already set

    if not os.path.exists(opt.out_dir + "opts.txt"):
        print("Cannot find " + opt.out_dir + "opts.txt", file=sys.stderr)
        print("Please check whether the output directory is correctly set by \"-o\"", file=sys.stderr)
        print("Now switching to normal mode.", file=sys.stderr)
        return

    print("Continue mode activated. Ignore all options other than -o/--out-dir.", file=sys.stderr)

    with open(opt.out_dir + "opts.txt", "r") as f:
        argv = []
        for line in f:
            argv.append(line.strip())
        print("Continue with options: " + " ".join(argv), file=sys.stderr)
        opt = Options()
        opt.continue_mode = 1 # avoid dead loop
        parse_opt(argv)
    f.close()

    opt.last_cp = -1
    if os.path.exists(opt.temp_dir + "cp.txt"):
        with open(opt.temp_dir + "cp.txt", "r") as cpf:
            for line in cpf:
                a = line.strip().split()
                if len(a) == 2 and a[1] == "done":
                    opt.last_cp = int(a[0])
        cpf.close()
    print("Continue from check point " + str(opt.last_cp), file=sys.stderr) 

def check_bin():
    if not os.path.exists(opt.bin_dir + "megahit_assemble"):
        print(megahit_version_str + '\n' + "Cannot find sub-program \"megahit_assemble\", please recompile.", file=sys.stderr)
        exit(1)
    if not os.path.exists(opt.bin_dir + "megahit_iter_k61"):
        print(megahit_version_str + '\n' + "Cannot find sub-program \"megahit_iter_k61\", please recompile.", file=sys.stderr)
        exit(1)
    if not os.path.exists(opt.bin_dir + "megahit_iter_k92"):
        print(megahit_version_str + '\n' + "Cannot find sub-program \"megahit_iter_k92\", please recompile.", file=sys.stderr)
        exit(1)
    if not os.path.exists(opt.bin_dir + "megahit_iter_k124"):
        print(megahit_version_str + '\n' + "Cannot find sub-program \"megahit_iter_k124\", please recompile.", file=sys.stderr)
        exit(1)

def check_builder():
    if not os.path.exists(opt.bin_dir + opt.builder):
        print(megahit_version_str + '\n' + "Cannot find sub-program \"%s\", please recompile." % opt.builder, file=sys.stderr)
        if opt.cpu_only == 0:
            print("Or if you want to use the CPU-only version, please run MEGAHIT with \"--cpu-only\"", file=sys.stderr)
        exit(1)

def graph_prefix(kmer_k):
    return opt.temp_dir + "k" + str(kmer_k)

def delect_file_if_exist(file_name):
    if os.path.exists(file_name):
        os.remove(file_name)

def delete_temp_files(kmer_k):
    delect_file_if_exist(graph_prefix(kmer_k) + ".w")
    delect_file_if_exist(graph_prefix(kmer_k) + ".last")
    delect_file_if_exist(graph_prefix(kmer_k) + ".isd")
    delect_file_if_exist(graph_prefix(kmer_k) + ".dn")
    delect_file_if_exist(graph_prefix(kmer_k) + ".f")
    delect_file_if_exist(graph_prefix(kmer_k) + ".mul")

    delect_file_if_exist(graph_prefix(kmer_k) + ".contigs.fa")
    delect_file_if_exist(graph_prefix(kmer_k) + ".multi")

    if kmer_k != opt.k_max and opt.no_low_local == 0:
        delect_file_if_exist(graph_prefix(kmer_k) + ".addi.fa")
        delect_file_if_exist(graph_prefix(kmer_k) + ".addi.multi")

    if kmer_k != opt.k_min:
        delect_file_if_exist(graph_prefix(kmer_k) + ".rr.pb")
        delect_file_if_exist(graph_prefix(kmer_k) + ".edges.0")
    else:
        for i in range(0, max(1, int(opt.num_cpu_threads / 3))):
            delect_file_if_exist(graph_prefix(kmer_k) + ".edges." + str(i))
        if opt.no_mercy == 0:
            for i in range(0, opt.num_cpu_threads - 1):
                delect_file_if_exist(graph_prefix(kmer_k) + ".mercy." + str(i))
        delect_file_if_exist(graph_prefix(kmer_k) + ".cand")

def write_cp(cp):
    cpf = open(opt.temp_dir + "cp.txt", "a")
    print("\n" + str(cp) + "\t" + "done", file=cpf);
    cpf.flush()
    cpf.close()

def build_first_graph():
    global cp
    phase1_out_threads = max(1, int(opt.num_cpu_threads / 3))
    if (not opt.continue_mode) or (cp > opt.last_cp):
        count_cmd = [opt.bin_dir + opt.builder, "count",
                       "-k", str(opt.k_min),
                       "-m", str(opt.min_count),
                       "--host_mem", str(opt.host_mem),
                       "--mem_flag", str(opt.mem_flag),
                       "--gpu_mem", str(opt.gpu_mem),
                       "--max_read_len", str(opt.max_read_len),
                       "--output_prefix", graph_prefix(opt.k_min),
                       "--num_cpu_threads", str(opt.num_cpu_threads),
                       "--num_output_threads", str(phase1_out_threads)]
        if opt.read_file != "":
            count_cmd.append("--input_file")
            count_cmd.append(opt.read_file)
        else:
            count_cmd.append("--input_file")
            count_cmd.append("-")

        try:
            log_file = open(log_file_name(), "a")
            start_time = datetime.now()
            print("%s" % (" ").join(count_cmd), file=log_file)
            print("[%s] Extracting solid (k+1)-mers for k = %d" % (start_time.strftime("%c"), opt.k_min), file=sys.stderr)
            print("[%s] Extracting solid (k+1)-mers for k = %d" % (start_time.strftime("%c"), opt.k_min), file=log_file)
            log_file.flush()
            if opt.read_file == "":
                input_thread = subprocess.Popen(opt.input_cmd, shell = True, stdout = subprocess.PIPE)
                cmd_thread = subprocess.Popen(count_cmd, stdin = input_thread.stdout, stdout = log_file)
                cmd_thread.wait()
                ret_code = cmd_thread.returncode
            else:
                ret_code = subprocess.call(count_cmd, stdout = log_file)
            if ret_code != 0:
                print("Error occurs when running \"builder count\"", file=sys.stderr)
                print("[Exit code %d] " % ret_code, file=sys.stderr)
                exit(ret_code)
            log_file.close()

        except OSError as o:
            if o.errno == errno.ENOTDIR or o.errno == errno.ENOENT:
                print("Error: sub-program builder not found, please recompile MEGAHIT", file=sys.stderr)
            exit(1)

    write_cp(cp)
    cp = cp + 1

    build_graph(opt.k_min, phase1_out_threads)

def build_graph(kmer_k, num_edge_files):
    global cp
    if (not opt.continue_mode) or (cp > opt.last_cp):
        if os.path.getsize(graph_prefix(kmer_k) + ".edges.0") == 0:
            return False # not build
        build_cmd = [opt.bin_dir + opt.builder, "build",
                       "--host_mem", str(opt.host_mem),
                       "--mem_flag", str(opt.mem_flag),
                       "--gpu_mem", str(opt.gpu_mem),
                       "--input_prefix", graph_prefix(kmer_k),
                       "--output_prefix", graph_prefix(kmer_k),
                       "--max_read_len", str(opt.max_read_len),
                       "--num_cpu_threads", str(opt.num_cpu_threads),
                       "--num_edge_files", str(num_edge_files)]
        if opt.no_mercy == 0 and kmer_k == opt.k_min:
            build_cmd.append("--need_mercy")

        try:
            log_file = open(log_file_name(), "a")
            start_time = datetime.now()
            print("%s" % (" ").join(build_cmd), file=log_file)
            print("[%s] Building graph for k = %d" % (start_time.strftime("%c"), kmer_k), file=sys.stderr)
            print("[%s] Building graph for k = %d" % (start_time.strftime("%c"), kmer_k), file=log_file)
            log_file.flush()
            ret_code = subprocess.call(build_cmd, stdout = log_file)
            if ret_code != 0:
                print("Error occurs when running \"builder build\" for k = %d" % kmer_k, file=sys.stderr)
                print("[Exit code %d]" % ret_code, file=sys.stderr)
                exit(ret_code)
            log_file.close()
        except OSError as o:
            if o.errno == errno.ENOTDIR or o.errno == errno.ENOENT:
                print("Error: sub-program builder not found, please recompile MEGAHIT", file=sys.stderr)
            exit(1) 

    write_cp(cp)
    cp = cp + 1
    return True

def iterate(cur_k, step):
    global cp
    if (not opt.continue_mode) or (cp > opt.last_cp):
        next_k = cur_k + step
        iterator = ""
        if next_k < 61:
            iterator = opt.bin_dir + "megahit_iter_k61"
        elif next_k < 92:
            iterator = opt.bin_dir + "megahit_iter_k92"
        else:
            iterator = opt.bin_dir + "megahit_iter_k124"

        iterate_cmd = [iterator,
                       "-c", graph_prefix(cur_k) + ".contigs.fa",
                       "-m", graph_prefix(cur_k) + ".multi",
                       "-t", str(opt.num_cpu_threads),
                       "-k", str(cur_k),
                       "-s", str(step),
                       "-o", graph_prefix(next_k),
                       "-l", str(opt.max_read_len)]

        if opt.no_low_local == 0:
            iterate_cmd.append("--addi_contig_file")
            iterate_cmd.append(graph_prefix(cur_k) + ".addi.fa")
            iterate_cmd.append("--addi_multi_file")
            iterate_cmd.append(graph_prefix(cur_k) + ".addi.multi")

        if cur_k == opt.k_min:
            if opt.read_file == "":
                iterate_cmd.append("-r")
                iterate_cmd.append("-")
            else:
                iterate_cmd.append("-r")
                iterate_cmd.append(opt.read_file)

            iterate_cmd.append("-f")
            iterate_cmd.append("fasta")

        else:
            iterate_cmd.append("-r")
            iterate_cmd.append(graph_prefix(cur_k) + ".rr.pb")
            iterate_cmd.append("-f")
            iterate_cmd.append("binary")

        try:
            log_file = open(log_file_name(), "a")
            start_time = datetime.now()
            print("%s" % (" ").join(iterate_cmd), file=log_file)
            print("[%s] Extracting iterative edges from k = %d to %d" % (start_time.strftime("%c"), cur_k, next_k), file=sys.stderr)
            print("[%s] Extracting iterative edges from k = %d to %d" % (start_time.strftime("%c"), cur_k, next_k), file=log_file)
            log_file.flush()

            ret_code = 0
            if cur_k == opt.k_min and opt.read_file == "":
                input_thread = subprocess.Popen(opt.input_cmd, shell = True, stdout = subprocess.PIPE)
                cmd_thread = subprocess.Popen(iterate_cmd, stdin = input_thread.stdout, stdout = log_file)
                cmd_thread.wait()
                ret_code = cmd_thread.returncode
            else:
                ret_code = subprocess.call(iterate_cmd, stdout = log_file)
            if ret_code != 0:
                print("Error occurs when running iterator for k = %d to k = %d " % (cur_k, next_k), file=sys.stderr)
                print("[Exit code %d]" % ret_code, file=sys.stderr)
                exit(ret_code)

            log_file.close()

        except OSError as o:
            if o.errno == errno.ENOTDIR or o.errno == errno.ENOENT:
                print("Error: sub-program iterater_edge not found, please recompile MEGAHIT", file=sys.stderr)
            exit(1)
    write_cp(cp)
    cp = cp + 1

def assemble(cur_k):
    global cp
    if (not opt.continue_mode) or (cp > opt.last_cp):
        assembly_cmd = [opt.bin_dir + "megahit_assemble",
                        "-s", graph_prefix(cur_k),
                        "-o", graph_prefix(cur_k),
                        "-t", str(opt.num_cpu_threads),
                        "--max_tip_len", str(opt.max_tip_len),
                        "--min_final_contig_len", str(opt.min_contig_len)]

        if opt.no_bubble == 1:
            assembly_cmd.append("--no_bubble")
        if opt.no_low_local == 0:
            assembly_cmd.append("--remove_low_local")
            assembly_cmd.append("--low_local_ratio")
            assembly_cmd.append(str(opt.low_local_ratio))
        if cur_k == opt.k_max:
            assembly_cmd.append("--is_final_round")

        try:
            log_file = open(log_file_name(), "a")
            start_time = datetime.now()
            print("%s" % (" ").join(assembly_cmd), file=log_file)
            print("[%s] Assembling contigs from SdBG for k = %d" % (start_time.strftime("%c"), cur_k), file=sys.stderr)
            print("[%s] Assembling contigs from SdBG for k = %d" % (start_time.strftime("%c"), cur_k), file=log_file)
            log_file.flush()
            ret_code = subprocess.call(assembly_cmd, stdout = log_file)
            if ret_code != 0:
                print("Error occurs when assembling contigs for k = %d" % cur_k, file=sys.stderr)
                print("[Exit code %d]" % ret_code, file=sys.stderr)
                exit(ret_code)

            log_file.close()
            
        except OSError as o:
            if o.errno == errno.ENOTDIR or o.errno == errno.ENOENT:
                print("Error: sub-program assembler not found, please recompile MEGAHIT", file=sys.stderr)
            exit(1)
    write_cp(cp)
    cp = cp + 1

def merge_final():
    log_file = open(log_file_name(), "a")
    start_time = datetime.now()
    print("[%s] Merging to output final contigs." % (start_time.strftime("%c")), file=sys.stderr)
    print("[%s] Merging to output final contigs.." % (start_time.strftime("%c")), file=log_file)
    os.system("cat " + opt.temp_dir + "*.final.contigs.fa > " + opt.out_dir + "final.contigs.fa")
    log_file.flush()
    log_file.close()

def main(argv = None):
    if argv is None:
        argv = sys.argv

    try:
        check_bin()
        parse_opt(argv[1:])
        check_opt()
        check_builder()

        start_time = datetime.now()  
        print(megahit_version_str, file=sys.stderr)
        print("[%s] Start assembly. Number of CPU threads %d." % (start_time.strftime("%c"), opt.num_cpu_threads), file=sys.stderr)

        make_out_dir()
        if opt.continue_mode != True:
            write_opt(argv[1:]) # for --continue
        build_first_graph()
        assemble(opt.k_min)

        k_step = opt.k_step
        cur_k = opt.k_min
        while cur_k < opt.k_max:
            next_k = min(cur_k + k_step, opt.k_max)
            if next_k > opt.k_max:
                k_step = opt.k_max - cur_k
                next_k = opt.k_max

            iterate(cur_k, next_k - cur_k)

            if not build_graph(next_k, 1):
                cur_k = next_k
                break
            assemble(next_k)

            if opt.keep_tmp_files == 0:
                delete_temp_files(cur_k)
            cur_k = next_k
        # end while

        if opt.keep_tmp_files == 0:
            delete_temp_files(cur_k)

        merge_final()
        delect_file_if_exist(opt.temp_dir + "cp.txt")

        log_file = open(log_file_name(), "a")
        start_time = datetime.now()
        print("[%s] ALL DONE." % (start_time.strftime("%c")), file=sys.stderr)
        print("[%s] ALL DONE." % (start_time.strftime("%c")), file=log_file)
        log_file.flush()
        log_file.close()
        open(opt.out_dir + "done", "w").close()

    except Usage as err:
        print(sys.argv[0].split("/")[-1] + ": " + str(err.msg), file=sys.stderr)
        return 2

if __name__ == "__main__":
    sys.exit(main())
